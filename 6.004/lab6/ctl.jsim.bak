.include "/mit/6.004/jsim/nominal.jsim"
.include "/mit/6.004/jsim/stdcell.jsim"
.include "/mit/6.004/jsim/lab6ctl.jsim"

.subckt ctl reset id[31:26] ra2sel bsel alufn[4:0] wdsel[1:0] werf moe wr

xctl vdd 0 0 id[31:26]
    + pcsel[2:0] wasel asel ra2sel bsel alufn[4:0] 
    + wdsel[1:0] werf moe xwr
    + $memory width=17 nlocations=64 contents=(
        + 0b00000000000000000    // 0
        + 0b00000000000000000    // 2
        + 0b00000000000000000    // 2
        + 0b00000000000000000    // 3
        + 0b00000000000000000    // 4
        + 0b00000000000000000    // 5
        + 0b00000000000000000    // 6
        + 0b00000000000000000    // 7
        + 0b00000000000000000    // 8
        + 0b00000000000000000    // 9 
        + 0b00000000000000000    // 10
        + 0b00000000000000000    // 11
        + 0b00000000000000000    // 12
        + 0b00000000000000000    // 13
        + 0b00000000000000000    // 14
        + 0b00000000000000000    // 15
        + 0b00000000000000000    // 16
        + 0b00000000000000000    // 17
        + 0b00000000000000000    // 18
        + 0b00000000000000000    // 19
        + 0b00000000000000000    // 20
        + 0b00000000000000000    // 21
        + 0b00000000000000000    // 22
        + 0b00000000000000000    // 23

        + 0b00000010000010110    // 24 LD
        + 0b00000110000000001    // 25 ST
        + 0b00000000000000000    // 26 
        + 0b00000000000000000    // 27 JMP
        + 0b00000000000000000    // 28 
        + 0b00000000000000000    // 29 BEQ
        + 0b00000000000000000    // 30 BNE
        + 0b00000000000000000    // 31 LDR

        + 0b00000000000001100    // 32 ADD
        + 0b00000000000101100    // 33 SUB
        + 0b00000000000000000    // 34 MUL*
        + 0b00000000000000000    // 35 DIV*
        + 0b00000000010101100    // 36 CMPEQ
        + 0b00000000011101100    // 37 CMPLT
        + 0b00000000110101100    // 38 CMPLE
        + 0b00000000000000000    // 39 
        + 0b00000001100001100    // 40 AND
        + 0b00000001111001100    // 41 OR
        + 0b00000001011001100    // 42 XOR
        + 0b00000001100101100    // 43 XNOR
        + 0b00000000100001100    // 44 SHL
        + 0b00000000100101100    // 45 SHR
        + 0b00000000101101100    // 46 SRA
        + 0b00000000000000000    // 47 

        + 0b00000010000001100    // 48 ADDC
        + 0b00000010000101100    // 49 SUBC
        + 0b00000000000000000    // 50 MULC*
        + 0b00000000000000000    // 51 DIVC*
        + 0b00000010010101100    // 52 CMPEQC
        + 0b00000010011101100    // 53 CMPLTC
        + 0b00000010110101100    // 54 CMPLEC
        + 0b00000000000000000    // 55 
        + 0b00000010001101100    // 56 ANDC
        + 0b00000011110101100    // 57 ORC
        + 0b00000010110001100    // 58 XORC
        + 0b00000011001101100    // 59 XNORC
        + 0b00000010100001100    // 60 SHLC
        + 0b00000010100101100    // 61 SHRC
        + 0b00000010101101100    // 62 SRAC
        + 0b00000000000000000    // 63
        + )

	xmux reset xwr 0 wr mux2
.ends
