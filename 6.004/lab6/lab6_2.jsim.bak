.include "/mit/6.004/jsim/nominal.jsim"
.include "/mit/6.004/jsim/stdcell.jsim"
.include "/mit/6.004/jsim/lab6checkoff.jsim"

.subckt pc clk reset pcsel[2:0] xadr[31:0]
    + illop[31:0] jt[31:0] pcjmp[31:0] pcplusfour[31:0] ia[31:0]
	xg01 four[31:3] constant0
	xg02 four[2] constant1
	xg03 four[1:0] constant0
	
	xplus4 0 ia[31:0] four[31:0] disconn pcplusfour[30:0] z v n add32bit

    // get z
    xpcplus ia[31] pcplusfour[31] buffer
    
    xmux4 pcsel[0]#32 pcsel[1]#32 pcplusfour[31:0] pcjmp[31:0] jt[31:0] illop[31:0] pcmux4result[31:0] mux4
    xmux5 pcsel[2]#32 pcmux4result[31:0] xadr[31:0] pcmux5result[31:0] mux2

    xmux reset#32 pcmux5result[31:0] vdd 0#31 ianew[31:0] mux2
    xreg1 ianew[31:0] clk#32 ia[31:0] dreg
.ends


// regfile

.subckt regfile clk werf ra2sel ra[4:0] rb[4:0] rc[4:0]
    + wdata[31:0] radata[31:0] rbdata[31:0]

    Xregfile
        + vdd 0 0 ra[4:0] adata[31:0]     // A read port
        + vdd 0 0 ra2mux[4:0] bdata[31:0] // B read port
        + 0 clk werf rc[4:0] wdata[31:0]  // write port
        + $memory width=32 nlocations=31
    
    xselect ra2sel#5 rb[4:0] rc[4:0] ra2mux[4:0] mux2
    xm ra[3:0] z1 and4
    xm2 ra[4] z1 z2 and2
    
    xm3 ra2mux[3:0] z3 and4
    xm4 ra2mux[4] z3 z4 and2
    
    xmux z2#32 adata[31:0] 0#32 radata[31:0] mux2
    xmux2 z4#32 bdata[31:0] 0#32 rbdata[31:0] mux2

.ends


// ctl

.subckt ctl reset irq superbit pcsel[2:0] id[31:26] ra2sel wasel asel bsel alufn[4:0] wdsel[1:0] werf moe wr z

xctl vdd 0 0 z id[31:26]
    + xpcsel[2:0] xwasel asel ra2sel bsel alufn[4:0] 
    + wdsel[1:0] xwerf moe xwr
    + $memory width=17 nlocations=128 contents=(
        + 0b01110000000000100    // 0
        + 0b01110000000000100    // 1
        + 0b01110000000000100    // 2
        + 0b01110000000000100    // 3
        + 0b01110000000000100    // 4
        + 0b01110000000000100    // 5
        + 0b01110000000000100    // 6
        + 0b01110000000000100    // 7
        + 0b01110000000000100    // 8
        + 0b01110000000000100    // 9 
        + 0b01110000000000100    // 10
        + 0b01110000000000100    // 11
        + 0b01110000000000100    // 12
        + 0b01110000000000100    // 13
        + 0b01110000000000100    // 14
        + 0b01110000000000100    // 15
        + 0b01110000000000100    // 16
        + 0b01110000000000100    // 17
        + 0b01110000000000100    // 18
        + 0b01110000000000100    // 19
        + 0b01110000000000100    // 20
        + 0b01110000000000100    // 21
        + 0b01110000000000100    // 22
        + 0b01110000000000100    // 23

        + 0b00000010000010110    // 24 LD
        + 0b00000110000000001    // 25 ST
        + 0b01110000000000100    // 26 
        + 0b01000000000000100    // 27 JMP
        + 0b01110000000000100    // 28 
        + 0b00000000000101100    // 29 BEQ
        + 0b00100000000000100    // 30 BNE
        + 0b00001001101010110    // 31 LDR

        + 0b00000000000001100    // 32 ADD
        + 0b00000000000101100    // 33 SUB
        + 0b00000000000000000    // 34 MUL*
        + 0b00000000000000000    // 35 DIV*
        + 0b00000000010101100    // 36 CMPEQ
        + 0b00000000011101100    // 37 CMPLT
        + 0b00000000110101100    // 38 CMPLE
        + 0b01110000000000100    // 39 
        + 0b00000001100001100    // 40 AND
        + 0b00000001111001100    // 41 OR
        + 0b00000001011001100    // 42 XOR
        + 0b00000001100101100    // 43 XNOR
        + 0b00000000100001100    // 44 SHL
        + 0b00000000100101100    // 45 SHR
        + 0b00000000101101100    // 46 SRA
        + 0b01110000000000100    // 47 

        + 0b00000010000001100    // 48 ADDC
        + 0b00000010000101100    // 49 SUBC
        + 0b00000000000000000    // 50 MULC*
        + 0b00000000000000000    // 51 DIVC*
        + 0b00000010010101100    // 52 CMPEQC
        + 0b00000010011101100    // 53 CMPLTC
        + 0b00000010110101100    // 54 CMPLEC
        + 0b01110000000000100    // 55       
        + 0b00000011100001100    // 56 ANDC
        + 0b00000011111001100    // 57 ORC
        + 0b00000011011001100    // 58 XORC
        + 0b00000011100101100    // 59 XNORC
        + 0b00000010100001100    // 60 SHLC
        + 0b00000010100101100    // 61 SHRC
        + 0b00000010101101100    // 62 SRAC
        + 0b01110000000000100    // 63      

        + 0b01110000000000100    // 0
        + 0b01110000000000100    // 2
        + 0b01110000000000100    // 2
        + 0b01110000000000100    // 3
        + 0b01110000000000100    // 4
        + 0b01110000000000100    // 5
        + 0b01110000000000100    // 6
        + 0b01110000000000100    // 7
        + 0b01110000000000100    // 8
        + 0b01110000000000100    // 9 
        + 0b01110000000000100    // 10
        + 0b01110000000000100    // 11
        + 0b01110000000000100    // 12
        + 0b01110000000000100    // 13
        + 0b01110000000000100    // 14
        + 0b01110000000000100    // 15
        + 0b01110000000000100    // 16
        + 0b01110000000000100    // 17
        + 0b01110000000000100    // 18
        + 0b01110000000000100    // 19
        + 0b01110000000000100    // 20
        + 0b01110000000000100    // 21
        + 0b01110000000000100    // 22
        + 0b01110000000000100    // 23

	+ 0b00000010000010110    // 24 LD
        + 0b00000110000000001    // 25 ST  
        + 0b01110000000000100    // 26     
        + 0b01000000000000100    // 27 JMP 
        + 0b01110000000000100    // 28     
        + 0b00100000000000100    // 29 BEQ 
        + 0b00000000000000100    // 30 BNE 
        + 0b00001001101010110    // 31 LDR 

        + 0b00000000000001100    // 32 ADD
        + 0b00000000000101100    // 33 SUB
        + 0b01110000000000100    // 34 MUL*
        + 0b01110000000000100    // 35 DIV*
        + 0b00000000010101100    // 36 CMPEQ
        + 0b00000000011101100    // 37 CMPLT
        + 0b00000000110101100    // 38 CMPLE
        + 0b01110000000000100    // 39 
        + 0b00000001100001100    // 40 AND
        + 0b00000001111001100    // 41 OR
        + 0b00000001011001100    // 42 XOR
        + 0b00000001100101100    // 43 XNOR
        + 0b00000000100001100    // 44 SHL
        + 0b00000000100101100    // 45 SHR
        + 0b00000000101101100    // 46 SRA
        + 0b01110000000000100    // 47 

        + 0b00000010000001100    // 48 ADDC
        + 0b00000010000101100    // 49 SUBC
        + 0b01110000000000100    // 50 MULC*
        + 0b01110000000000100    // 51 DIVC*
        + 0b00000010010101100    // 52 CMPEQC
        + 0b00000010011101100    // 53 CMPLTC
        + 0b00000010110101100    // 54 CMPLEC
        + 0b01110000000000100    // 55       
        + 0b00000011100001100    // 56 ANDC
        + 0b00000011111001100    // 57 ORC
        + 0b00000011011001100    // 58 XORC
        + 0b00000011100101100    // 59 XNORC
        + 0b00000010100001100    // 60 SHLC
        + 0b00000010100101100    // 61 SHRC
        + 0b00000010101101100    // 62 SRAC
        + 0b01110000000000100    // 63      

        + )

	xmux reset xwr 0 wr mux2
	xmux41 irq#3 superbit#3 xpcsel[2:0] vdd 0 0 xpcsel[2:0] xpcsel[2:0] pcsel[2:0] mux4
    	xmux42 irq superbit xwerf vdd xwerf xwerf werf mux4
	xmux43 irq superbit xwasel vdd xwasel xwasel wasel mux4
.ends

// beta

.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0] moe mrd[31:0] wr mwd[31:0]

    // get the components
    xillop vdd 0#28 vdd 0#2 illop[31:0] buffer
    xxadr vdd 0#27 vdd 0#3 xadr[31:0] buffer
    xjt radata[31:0] jt[31:0] buffer
	xbuff1 id[15:0] inst[15:0] buffer
	xbuff2 id[15]#16 inst[31:16] buffer
	xbuff3 rbdata[31:0] mwd[31:0] buffer

    // all of the subcomponents being put together
	xpc clk reset pcsel[2:0] xadr[31:0] illop[31:0] jt[31:0] pcjmp[31:0] pcplusfour[31:0] ia[31:0] pc
	xregfile clk werf ra2sel id[20:16] id[15:11] wa[4:0] wdata[31:0] radata[31:0] rbdata[31:0] regfile
	xctl reset irq ia[31] pcsel[2:0] id[31:26] ra2sel wasel asel bsel alufn[4:0] wdsel[1:0] werf moe wr z ctl
	
    // all of the muxes
    xwaselmux wasel#5 id[25:21] vdd vdd vdd vdd 0 wa[4:0] mux2
    xbselmux bsel#32 rbdata[31:0] inst[31:0] inpb[31:0] mux2
    xalu alufn[4:0] inpa[31:0] inpb[31:0] ma[31:0] z2 v2 n2 alu
    xpcjmpadder 0 pcplusfour[31:0] inst[29:0] 0 0 pcjmp[31:0] z1 v1 n1 add32bit
    xaselmux asel#32 radata[31:0] 0 pcjmp[30:0] inpa[31:0] mux2 
    xwdselmux wdsel[0]#32 wdsel[1]#32 pcplusfour[31:0] ma[31:0] mrd[31:0] 0#32 wdata[31:0] mux4

    // get z
    Xnor01 radata[3:0] nors01 nor4
    Xnor02 radata[7:4] nors02 nor4
    Xnor03 radata[11:8] nors03 nor4
    Xnor04 radata[15:12] nors04 nor4
    Xnor05 radata[19:16] nors05 nor4
    Xnor06 radata[23:20] nors06 nor4
    Xnor07 radata[27:24] nors07 nor4
    Xnor08 radata[31:28] nors08 nor4
    Xnor09 nors01 nors02 nors03 nors04 nors1 and4
    Xnor10 nors05 nors06 nors07 nors08 nors2 and4
    Xnor11 nors1 nors2 z and2

.ends




// Lab3 alu logic


.subckt BOOL alufn[3:0] A[31:0] B[31:0] OUT[31:0]
xbooleanb A[31:0] B[31:0] alufn[0]#32 alufn[1]#32 alufn[2]#32 alufn[3]#32 OUT[31:0] mux4
.ends

.subckt booleanbase a3 a2 a1 a0 A B out 
Xand1 A B d0 and2
Xxor1 A B d1 xor2
Xbuffer1 A d2 buffer
Xor1 A B d3 or2
Xand21 a2 a1 s0 and2
Xand31 a3 a1 s1 and2
Xmux1 s0 s1 d0 d1 d2 d3 out mux4
.ends

.subckt ARITH alufn[1:0] A[31:0] B[31:0] OUT[31:0] Z V N
xadder alufn[0] A[31:0] B[31:0] add[31:0] Z V N add32bit
xmultiplier A[31:0] B[31:0] multiply[31:0] MULT
xaddormultiply alufn[1]#32 add[31:0] multiply[31:0] OUT[31:0] mux2
.ends

.subckt add32bit alufn A[31:0] B[31:0] OUT[31:0] Z V N
xbxorgate alufn#32 B[31:0] XB[31:0] xor2
xfulladder alufn A[0] XB[0] OUT[0] C[0] FA
xfulladder2 C[0:30] A[1:31] XB[1:31] OUT[1:31] C[1:31] FA

xbuffer OUT[31] N buffer

Xnor01 OUT[3:0] nors01 nor4
Xnor02 OUT[7:4] nors02 nor4
Xnor03 OUT[11:8] nors03 nor4
Xnor04 OUT[15:12] nors04 nor4
Xnor05 OUT[19:16] nors05 nor4
Xnor06 OUT[23:20] nors06 nor4
Xnor07 OUT[27:24] nors07 nor4
Xnor08 OUT[31:28] nors08 nor4

Xnor10 nors01 nors02 nors03 nors04 nor10 and4
Xnor11 nors05 nors06 nors07 nors08 nor11 and4
Xnor20 nor10 nor11 Z and2

xvcheck0 A[31] XB[31] OUT[31] check00 checkvfirst
xvcheck1 A[31] XB[31] OUT[31] check01 checkvsecond
xgetv check00 check01 V or2
.ends

.subckt checkvsecond XA XB S Z
xinv1 XA z1 inverter
xinv2 XB z2 inverter
xand1 z1 z2 S Z and3
.ends

.subckt checkvfirst XA XB S Z
xand1 XA XB z1 and2
xinv1 S z2 inverter
xand2 z2 z1 Z and2
.ends


* Full adder module that takes in two bits A and B, along with some carry Cin, and returns S and a carry C0
.subckt FA Cin A B S C0
Xxor1 A B 1 xor2
Xxor2 Cin 1 S xor2
Xnand1 A B 2 nand2
Xnand2 B Cin 3 nand2
Xnand3 A Cin 4 nand2
Xnand4 2 3 4 C0 nand3
.ends

.subckt SHIFT alufn[1:0] A[31:0] B[31:0] OUT[31:0]
xshifta A[31:0] B[31:0] shl[31:0] 0 SHL
xshiftb A[31:0] B[31:0] shr[31:0] 0 SHR
xshiftc A[31:0] B[31:0] sra[31:0] A[31] SHR
xcomparemux alufn[1]#32 alufn[0]#32 shl[31:0] 0#32 shr[31:0] sra[31:0] OUT[31:0] mux4
.ends

.subckt SHL A[31:0] B[31:0] OUT[31:0] V
xshifta B[4]#32 A[31:0] A[15:0] V#16 outA[31:0] mux2
xshiftb B[3]#32 outA[31:0] outA[23:0] V#8 outB[31:0] mux2
xshiftc B[2]#32 outB[31:0] outB[27:0] V#4 outC[31:0] mux2
xshiftd B[1]#32 outC[31:0] outC[29:0] V#2 outD[31:0] mux2
xshifte B[0]#32 outD[31:0] outD[30:0] V OUT[31:0] mux2
.ends

.subckt SHR A[31:0] B[31:0] OUT[31:0] V
xshifta B[4]#32 A[31:0] V#16 A[31:16] outA[31:0] mux2
xshiftb B[3]#32 outA[31:0] V#8 outA[31:8] outB[31:0] mux2
xshiftc B[2]#32 outB[31:0] V#4 outB[31:4] outC[31:0] mux2
xshiftd B[1]#32 outC[31:0] V#2 outC[31:2] outD[31:0] mux2
xshifte B[0]#32 outD[31:0] V outD[31:1] OUT[31:0] mux2
.ends

.subckt CMP alufn3 alufn1 Z V N OUT[31:0]
xzero OUT[31:1] constant0
xxorout N V outxor xor2
xorout Z outxor outor or2
xcomparemux alufn1 alufn3 Z outxor outor 0 OUT[0] mux4
.ends

.subckt MULT A[31:0] B[31:0] OUT[31:0]
* Do all of the partial multiplies
xpartialMultAA A[0:31] B[0]#32  ZAA[0:31] and2
xpartialMultBA A[0:31] B[1]#32  ZBA[0:31] and2
xpartialMultCA A[0:31] B[2]#32  ZCA[0:31] and2
xpartialMultDA A[0:31] B[3]#32  ZDA[0:31] and2
xpartialMultEA A[0:31] B[4]#32  ZEA[0:31] and2
xpartialMultFA A[0:31] B[5]#32  ZFA[0:31] and2
xpartialMultGA A[0:31] B[6]#32  ZGA[0:31] and2
xpartialMultHA A[0:31] B[7]#32  ZHA[0:31] and2
xpartialMultIA A[0:31] B[8]#32  ZIA[0:31] and2
xpartialMultJA A[0:31] B[9]#32  ZJA[0:31] and2
xpartialMultAB A[0:31] B[10]#32 ZAB[0:31] and2
xpartialMultBB A[0:31] B[11]#32 ZBB[0:31] and2
xpartialMultCB A[0:31] B[12]#32 ZCB[0:31] and2
xpartialMultDB A[0:31] B[13]#32 ZDB[0:31] and2
xpartialMultEB A[0:31] B[14]#32 ZEB[0:31] and2
xpartialMultFB A[0:31] B[15]#32 ZFB[0:31] and2
xpartialMultGB A[0:31] B[16]#32 ZGB[0:31] and2
xpartialMultHB A[0:31] B[17]#32 ZHB[0:31] and2
xpartialMultIB A[0:31] B[18]#32 ZIB[0:31] and2
xpartialMultJB A[0:31] B[19]#32 ZJB[0:31] and2
xpartialMultAC A[0:31] B[20]#32 ZAC[0:31] and2
xpartialMultBC A[0:31] B[21]#32 ZBC[0:31] and2
xpartialMultCC A[0:31] B[22]#32 ZCC[0:31] and2
xpartialMultDC A[0:31] B[23]#32 ZDC[0:31] and2
xpartialMultEC A[0:31] B[24]#32 ZEC[0:31] and2
xpartialMultFC A[0:31] B[25]#32 ZFC[0:31] and2
xpartialMultGC A[0:31] B[26]#32 ZGC[0:31] and2
xpartialMultHC A[0:31] B[27]#32 ZHC[0:31] and2
xpartialMultIC A[0:31] B[28]#32 ZIC[0:31] and2
xpartialMultJC A[0:31] B[29]#32 ZJC[0:31] and2
xpartialMultAD A[0:31] B[30]#32 ZAD[0:31] and2
xpartialMultBD A[0:31] B[31]#32 ZBD[0:31] and2

** Get the adder outputs
xaddAA 0 ZAA[31:0] ZBA[30:0]  0    PAA[31:0] zAA vAA nAA add32bit
xaddBA 0 PAA[31:0] ZCA[29:0]  0#2  PBA[31:0] zBA vBA nBA add32bit
xaddCA 0 PBA[31:0] ZDA[28:0]  0#3  PCA[31:0] zCA vCA nCA add32bit
xaddDA 0 PCA[31:0] ZEA[27:0]  0#4  PDA[31:0] zDA vDA nDA add32bit
xaddEA 0 PDA[31:0] ZFA[26:0]  0#5  PEA[31:0] zEA vEA nEA add32bit
xaddFA 0 PEA[31:0] ZGA[25:0]  0#6  PFA[31:0] zFA vFA nFA add32bit
xaddGA 0 PFA[31:0] ZHA[24:0]  0#7  PGA[31:0] zGA vGA nGA add32bit
xaddHA 0 PGA[31:0] ZIA[23:0]  0#8  PHA[31:0] zHA vHA nHA add32bit
xaddIA 0 PHA[31:0] ZJA[22:0]  0#9  PIA[31:0] zIA vIA nIA add32bit
xaddJA 0 PIA[31:0] ZAB[21:0] 0#10 PJA[31:0] zJA vJA nJA add32bit
xaddAB 0 PJA[31:0] ZBB[20:0] 0#11 PAB[31:0] zAB vAB nAB add32bit
xaddBB 0 PAB[31:0] ZCB[19:0] 0#12 PBB[31:0] zBB vBB nBB add32bit
xaddCB 0 PBB[31:0] ZDB[18:0] 0#13 PCB[31:0] zCB vCB nCB add32bit
xaddDB 0 PCB[31:0] ZEB[17:0] 0#14 PDB[31:0] zDB vDB nDB add32bit
xaddEB 0 PDB[31:0] ZFB[16:0] 0#15 PEB[31:0] zEB vEB nEB add32bit
xaddFB 0 PEB[31:0] ZGB[15:0] 0#16 PFB[31:0] zFB vFB nFB add32bit
xaddGB 0 PFB[31:0] ZHB[14:0] 0#17 PGB[31:0] zGB vGB nGB add32bit
xaddHB 0 PGB[31:0] ZIB[13:0] 0#18 PHB[31:0] zHB vHB nHB add32bit
xaddIB 0 PHB[31:0] ZJB[12:0] 0#19 PIB[31:0] zIB vIB nIB add32bit
xaddJB 0 PIB[31:0] ZAC[11:0] 0#20 PJB[31:0] zJB vJB nJB add32bit
xaddAC 0 PJB[31:0] ZBC[10:0] 0#21 PAC[31:0] zAC vAC nAC add32bit
xaddBC 0 PAC[31:0] ZCC[9:0] 0#22 PBC[31:0] zBC vBC nBC add32bit
xaddCC 0 PBC[31:0] ZDC[8:0] 0#23 PCC[31:0] zCC vCC nCC add32bit
xaddDC 0 PCC[31:0] ZEC[7:0] 0#24 PDC[31:0] zDC vDC nDC add32bit
xaddEC 0 PDC[31:0] ZFC[6:0] 0#25 PEC[31:0] zEC vEC nEC add32bit
xaddFC 0 PEC[31:0] ZGC[5:0] 0#26 PFC[31:0] zFC vFC nFC add32bit
xaddGC 0 PFC[31:0] ZHC[4:0] 0#27 PGC[31:0] zGC vGC nGC add32bit
xaddHC 0 PGC[31:0] ZIC[3:0] 0#28 PHC[31:0] zHC vHC nHC add32bit
xaddIC 0 PHC[31:0] ZJC[2:0] 0#29 PIC[31:0] zIC vIC nIC add32bit
xaddJC 0 PIC[31:0] ZAD[1:0] 0#30 PJC[31:0] zJC vJC nJC add32bit
xaddAD 0 PJC[31:0] ZBD[0] 0#31 OUT[31:0] zout vout nout add32bit
.ends


.subckt alu alufn[4:0] a[31:0] b[31:0] out[31:0] z v n

*** Generate outputs from each of BOOL, SHIFT, ARITH, CMP subcircuits:
xbool alufn[3:0] a[31:0] b[31:0] boolout[31:0] BOOL
xshift alufn[1:0] a[31:0] b[31:0] shiftout[31:0] SHIFT
xarith alufn[1:0] a[31:0] b[31:0] arithout[31:0] z v n ARITH
xcmp alufn[3] alufn[1] z v n cmpout[31:0] CMP

*** Combine them, using three multiplexors:
xmux1 alufn[4]#32 nonbool[31:0] boolout[31:0] out[31:0] mux2
xmux2 alufn[2]#32 arithshift[31:0] cmpout[31:0] nonbool[31:0] mux2
xmux3 alufn[3]#32 arithout[31:0] shiftout[31:0] arithshift[31:0] mux2

.ends
