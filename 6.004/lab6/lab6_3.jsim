.include "nominal.jsim"
.include "stdcell.jsim"
.include "alu.jsim"
.include "lab6checkoff.jsim"

//---------------PC-------------------

.subckt pc clk reset pcsel[2:0] xadr[31:0] illop[31:0] jt[31:0] c[31:0] ia[31:0] cplus[31:0] iaplusfour[31:0]

    Xand ia[31] jt[31] newpc31 and2
    Xadd ia[31:0] 0#29 vdd 0#3 iaplusfour[31:0] ADDER32 
    Xadd2 iaplusfour[31:0] c[29:0] 0#3 cplus[31:0] ADDER32
    
    Xmux1 pcsel[0]#32 pcsel[1]#32 iaplusfour[31:0] ia[31] cplus[30:0] newpc31 jt[30:2] 0#2 illop[31:0] intermedout[31:0] mux4
    Xmux2 pcsel[2]#32 intermedout[31:0] xadr[31:0] muxout[31:0] mux2
    
    Xreset reset#32 muxout[31:0] vdd 0#31 nextmux[31:0] mux2
    Xdreg nextmux[31:0] clk#32 ia[31:0] dreg
.ends

//-----------REGFILE-----------------

.subckt checkthirtyone A[4:0] out
    Xand1 A[4:1] out1 and4
    Xand2 A[0] out1 out and2
.ends

.subckt regfile clk werf ra2sel ra[4:0] rb[4:0] rc[4:0]
+ wdata[31:0] radata[31:0] rbdata[31:0] wasel

    Xmux ra2sel#5 rb[4:0] rc[4:0] ra2mux[4:0] mux2
    Xcheck31a ra[4:0] raout checkthirtyone
    Xcheck31b ra2mux[4:0] rbout checkthirtyone

    // WASEL mux
    Xxp vdd#4 0 xp[4:0] connectcirc
    Xwasel wasel#5 rc[4:0] xp[4:0] wa[4:0] mux2
    
    Xregfile
    + vdd 0 0 ra[4:0] adata[31:0]     // A read port
    + vdd 0 0 ra2mux[4:0] bdata[31:0] // B read port
    + 0 clk werf wa[4:0] wdata[31:0]  // write port
    + $memory width=32 nlocations=31

    Xmuxa raout#32 adata[31:0] 0#32 radata[31:0] mux2
    Xmuxb rbout#32 bdata[31:0] 0#32 rbdata[31:0] mux2
.ends

//-----------CTL--------------------
.subckt ctl reset z id[31:26] ra2sel bsel alufn[4:0] wdsel[1:0] werf moe wr pcsel[2:0] wasel asel 

    Xctl vdd 0 0 id[31:26]    // one read port
    + xpcsel[2:0] wasel asel ra2sel bsel alufn[4:0] wdsel[1:0] werf moe xwr
    + $memory width=17 nlocations=64 contents=(
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 
        + 0b01110000000000100 // 

        + 0b00000010000010110 //  LD
        + 0b00000110000000001 //  ST
        + 0b01110000000000100 // 
        + 0b01000000000000100 //  JMP
        + 0b00000000000000100 //  BEQ
        + 0b00000000000000100 //  BNE
        + 0b01110000000000100 // 
        + 0b00001001101010110 //  LDR

        + 0b00000000000001100 //  ADD
        + 0b00000000000101100 //  SUB
        + 0b00000000001001100 //  MUL 
        + 0b00000000000001100 //  DIV
        + 0b00000000010101100 //  CMPEQ
        + 0b00000000011101100 //  CMPLT
        + 0b00000000110101100 //  CMPLE
        + 0b01110000000000100 // 
        + 0b00000001100001100 //  AND
        + 0b00000001111001100 //  OR
        + 0b00000001011001100 //  XOR
        + 0b00000001100101100 //  XNOR
        + 0b00000000100001100 //  SHL
        + 0b00000000100101100 //  SHR
        + 0b00000000101101100 //  SRA
        + 0b01110000000000100 // 

        + 0b00000010000001100 //  ADDC
        + 0b00000010000101100 //  SUBC
        + 0b00000010001001100 //  MULC
        + 0b00000010000000100 //  DIVC 
        + 0b00000010010101100 //  CMPEQC
        + 0b00000010011101100 //  CMPLTC
        + 0b00000010110101100 //  CMPLEC
        + 0b01110000000000100 // 
        + 0b00000011100001100 //  ANDC
        + 0b00000011111001100 //  ORC
        + 0b00000011011001100 //  XORC
        + 0b00000011100101100 //  XNORC
        + 0b00000010100001100 //  SHLC
        + 0b00000010100101100 //  SHRC
        + 0b00000010101101100 //  SRAC
        + 0b01110000000000100 // 
    + )
    
    // logic for BNE/BEQ switching
    Xnor id31 id27 nor nor2
    Xand id30 id29 id28 nor bnebeq and4
    Xswitch id26 Z whichout xor2
    Xbranch whichout bnebeq branch and2
    Xpcsel branch#3 xpcsel[2:0] 0#2 vdd pcsel[2:0] mux2
    
    // for reset of wr
    Xreset reset xwr 0 wr mux2
.ends


//---------- the whole beta --------------

.subckt connectcirc a b
    .connect a b
.ends

.subckt signextend in[15:0] out[31:0]
    .connect out[31:16] in[15]
    Xconnectcirc in[15:0] out[15:0] connectcirc
.ends

.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0] moe mrd[31:0] wr mwd[31:0]

    Xpc clk reset pcsel[2:0] 
    + vdd 0#27 vdd 0 0 0 // xadr = 0x80000008
    + vdd 0#28 vdd 0 0 // illop = 0x80000004
    + radata[31:0] cext[31:0] ia[31:0] cplus[31:0] iaplusfour[31:0] pc
    
    Xctl reset raz id[31:26] ra2sel bsel alufn[4:0] wdseltemp[1:0] werftemp moe wrtemp xpcsel[2:0] waseltemp asel ctl
    
    Xum ia[31] usermode inverter
    Xint irq usermode inter and2
    Xint1 inter#3 xpcsel[2:0] vdd 0 0 pcsel[2:0] mux2
    Xint2 inter waseltemp vdd wasel mux2
    Xint3 inter werftemp vdd werf mux2
    Xint4 inter#2 wdseltemp[1:0] 0#2 wdsel[1:0] mux2
    Xint5 inter wrtemp 0 wr mux2
    
    Xregfile clk werf ra2sel id[20:16] id[15:11] id[25:21] wdata[31:0] radata[31:0] mwd[31:0] wasel regfile
    
    Xasel asel#32 radata[31:0] 0 cplus[30:0] adata[31:0] mux2
    
    Xnor01 radata[3:0] nors01 nor4
    Xnor02 radata[7:4] nors02 nor4
    Xnor03 radata[11:8] nors03 nor4
    Xnor04 radata[15:12] nors04 nor4
    Xnor05 radata[19:16] nors05 nor4
    Xnor06 radata[23:20] nors06 nor4
    Xnor07 radata[27:24] nors07 nor4
    Xnor08 radata[31:28] nors08 nor4
    
    Xnor10 nors01 nors02 nors03 nors04 nor10 and4
    Xnor11 nors05 nors06 nors07 nors08 nor11 and4
    Xnor20 nor10 nor11 raz and2
    
    // connect id and cext
    .connect cext[31:16] id[15]
    Xconnectcirc id[15:0] cext[15:0] connectcirc

    Xbsel bsel#32 mwd[31:0] cext[31:0] bdata[31:0] mux2
    
    Xalu alufn[4:0] adata[31:0] bdata[31:0] ma[31:0] z v n alu
    
    Xwdsel wdsel[1]#32 wdsel[0]#32 ia[31] iaplusfour[30:0] mrd[31:0] ma[31:0] 0#32 wdata[31:0] mux4
.ends


