.include "/mit/6.004/jsim/nominal.jsim"
.include "/mit/6.004/jsim/stdcell.jsim"
.include "/mit/6.004/jsim/lab6ctl.jsim"

.subckt ctl reset id[31:26] ra2sel bsel alufn[4:0] wdsel[1:0] werf moe wr

xctl vdd 0 0 id[31:26]
    + pcsel[2:0] wasel asel ra2sel bsel alufn[4:0] 
    + wdsel[1:0] werf moe xwr
    + $memory width=17 nlocations=64 contents=(
        + 0b00000000000000000    // 0
        + 0b00000000000000000    // 2
        + 0b00000000000000000    // 2
        + 0b00000000000000000    // 3
        + 0b00000000000000000    // 4
        + 0b00000000000000000    // 5
        + 0b00000000000000000    // 6
        + 0b00000000000000000    // 7
        + 0b00000000000000000    // 8
        + 0b00000000000000000    // 9 
        + 0b00000000000000000    // 10
        + 0b00000000000000000    // 11
        + 0b00000000000000000    // 12
        + 0b00000000000000000    // 13
        + 0b00000000000000000    // 14
        + 0b00000000000000000    // 15
        + 0b00000000000000000    // 16
        + 0b00000000000000000    // 17
        + 0b00000000000000000    // 18
        + 0b00000000000000000    // 19
        + 0b00000000000000000    // 20
        + 0b00000000000000000    // 21
        + 0b00000000000000000    // 22
        + 0b00000000000000000    // 23
        + 0b00000010000010110    // LD
        + 0b00000110000000001    // ST
        + 0b00000000000000000    // N/A
        + 0b00000000000000000    // JMP
        + 0b00000000000000000    // N/A
        + 0b00000000000000000    // BEQ
        + 0b00000000000000000    // BNE
        + 0b00000000000000000    // LDR
        + 0b00000000000001100    // ADD
        + 0b00000000000101100    // SUB
        + 0b00000000000000000    // MUL*
        + 0b00000000000000000    // DIV*
        + 0b00000000010101100    // CMPEQ
        + 0b00000000011101100    // CMPLT
        + 0b00000000110101100    // CMPLE
        + 0b00000000000000000    // N/A
        + 0b000000001100001100    // AND
        + 0b000000001111001100    // OR
        + 0b000000001011001100    // XOR
        + 0b000000000000000000    // N/A
        + 0b000000010000001100    // SHL
        + 0b000000010000101100    // SHR
        + 0b000000010001101100    // SRA
        + 0b000000000000000000    // N/A

        + 0b000000100000001100    // ADDC
        + 0b000000100000101100    // SUBC
        + 0b000000000000000000    // MULC*
        + 0b000000000000000000    // DIVC*
        + 0b000000111001101100    // CMPEQC
        + 0b000000111010101100    // CMPLTC
        + 0b000000111011101100    // CMPLEC
        + 0b000000000000000000    // N/A
        + 0b000000101100001100    // ANDC
        + 0b000000101111001100    // ORC
        + 0b000000101011001100    // XORC
        + 0b000000000000000000    // N/A
        + 0b000000110000001100    // SHLC
        + 0b000000110000101100    // SHRC
        + 0b000000110001101100    // SRAC
        + 0b000000000000000000    // N/A
        + )

xmux reset xwr 0 wr mux2
.ends
