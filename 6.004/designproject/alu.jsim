* Helper Subcircuits

* 3-input full adder: inputs are a, b, ci, outputs are s, co
.subckt FA a b ci s co
    Xg0 a b y xor2
    Xg1 y ci s xor2
    Xg2 a b d nand2
    Xg3 b ci e nand2
    Xg4 a ci f nand2
    Xg5 d e f co nand3
    Xg6 d e g nand2
.ends

.subckt NOR32 S[31:0] Z
    Xnor0 S[31:24] S[23:16] S[15:8] S[7:0] I[7:0] nor4
    Xnand0 I[7:6] I[5:4] I[3:2] I[1:0] I2[1:0] nand4
    Xnor1 I2[1] I2[0] Z nor2
.ends

.subckt GETV A XB OUT V
    Xid1 OUT notS inverter
    Xid2 A notA inverter
    Xid3 XB notXB inverter
    Xid4 XB A notS r1 and3
    Xid5 notA notXB OUT r2 and3
    Xid6 r1 r2 V or2
.ends

.subckt CMPLT N V LT
    Xor N V LT xor2
.ends

.subckt CMPLE Z N V L
    Xid1 N V LT xor2
    Xid2 Z LT L or2
.ends

.subckt ADDER32 A[31:0] B[31:0] ci OUT[31:0] 
    Xid1 A[0] B[0] ci OUT[0] C[0] FA
    Xid2 A[31:1] B[31:1] C[30:0] OUT[31:1] C[31:1] FA 
.ends

.subckt PCPlusFour32 A[31:0] OUT[31:0]
    Xbuff A[1:0] OUT[1:0] buffer
    Xid1 A[2] vdd 0 OUT[2] C[0] FA
    Xid2 A[31:3] 0#29 C[28:0] OUT[31:3] C[29:1] FA
.ends

.subckt check0and1 a b out 
    Xinv a ainv inverter
    Xand ainv b out and2
.ends

.subckt CarryLookAheadAdder32 a[31:0] b[31:0] c0 s[31:0]
    * use a buffer 
    Xnegate b[31:0] bx[31:0] buffer 

    * carry select
    Xcsa0 a[31:0] bx[31:0] 0#32 szero[31:0] xor3
    Xcsa1 a[31:0] bx[31:0] vdd#32 sone[31:0] xor3
    Xcsam cone[31:0] szero[31:0] sone[31:0] s[31:0] mux2
    Xt1 a[31:0] bx[31:0] gin[31:0] pin[31:0] GetGP 

    * lookaheads
    * level 2
    Xl20 gin[1:0] pin[1:0] gthree[0] pthree[0] LookAheadBlock
    Xl21 gin[3:2] pin[3:2] gthree[1] pthree[1] LookAheadBlock
    Xl22 gin[5:4] pin[5:4] gthree[2] pthree[2] LookAheadBlock
    Xl23 gin[7:6] pin[7:6] gthree[3] pthree[3] LookAheadBlock
    Xl24 gin[9:8] pin[9:8] gthree[4] pthree[4] LookAheadBlock
    Xl25 gin[11:10] pin[11:10] gthree[5] pthree[5] LookAheadBlock
    Xl26 gin[13:12] pin[13:12] gthree[6] pthree[6] LookAheadBlock
    Xl27 gin[15:14] pin[15:14] gthree[7] pthree[7] LookAheadBlock
    Xl28 gin[17:16] pin[17:16] gthree[8] pthree[8] LookAheadBlock
    Xl29 gin[19:18] pin[19:18] gthree[9] pthree[9] LookAheadBlock
    Xl210 gin[21:20] pin[21:20] gthree[10] pthree[10] LookAheadBlock
    Xl211 gin[23:22] pin[23:22] gthree[11] pthree[11] LookAheadBlock
    Xl212 gin[25:24] pin[25:24] gthree[12] pthree[12] LookAheadBlock
    Xl213 gin[27:26] pin[27:26] gthree[13] pthree[13] LookAheadBlock
    Xl214 gin[29:28] pin[29:28] gthree[14] pthree[14] LookAheadBlock
    Xl215 gin[31:30] pin[31:30] gthree[15] pthree[15] LookAheadBlock


    * level 3
    Xl30 gthree[1:0] pthree[1:0] gfour[0] pfour[0] LookAheadBlock
    Xl31 gthree[3:2] pthree[3:2] gfour[1] pfour[1] LookAheadBlock
    Xl32 gthree[5:4] pthree[5:4] gfour[2] pfour[2] LookAheadBlock
    Xl33 gthree[7:6] pthree[7:6] gfour[3] pfour[3] LookAheadBlock
    Xl34 gthree[9:8] pthree[9:8] gfour[4] pfour[4] LookAheadBlock
    Xl35 gthree[11:10] pthree[11:10] gfour[5] pfour[5] LookAheadBlock
    Xl36 gthree[13:12] pthree[13:12] gfour[6] pfour[6] LookAheadBlock
    Xl37 gthree[15:14] pthree[15:14] gfour[7] pfour[7] LookAheadBlock

    * level 4
    Xl40 gfour[1:0] pfour[1:0] gfive[0] pfive[0] LookAheadBlock
    Xl41 gfour[3:2] pfour[3:2] gfive[1] pfive[1] LookAheadBlock
    Xl42 gfour[5:4] pfour[5:4] gfive[2] pfive[2] LookAheadBlock
    Xl43 gfour[7:6] pfour[7:6] gfive[3] pfive[3] LookAheadBlock

    * level 5
    Xl50 gfive[1:0] pfive[1:0] gsix[0] psix[0] LookAheadBlock
    Xl51 gfive[3:2] pfive[3:2] gsix[1] psix[1] LookAheadBlock

    * level 6
    Xl60 gsix[1:0] psix[1:0] gseven[0] pseven[0] LookAheadBlock


    * Carries
    * level 2
    Xc20 ctwo[0] gin[0] pin[0] cone[1:0] CarryBlock
    Xc21 ctwo[1] gin[2] pin[2] cone[3:2] CarryBlock
    Xc22 ctwo[2] gin[4] pin[4] cone[5:4] CarryBlock
    Xc23 ctwo[3] gin[6] pin[6] cone[7:6] CarryBlock
    Xc24 ctwo[4] gin[8] pin[8] cone[9:8] CarryBlock
    Xc25 ctwo[5] gin[10] pin[10] cone[11:10] CarryBlock
    Xc26 ctwo[6] gin[12] pin[12] cone[13:12] CarryBlock
    Xc27 ctwo[7] gin[14] pin[14] cone[15:14] CarryBlock
    Xc28 ctwo[8] gin[16] pin[16] cone[17:16] CarryBlock
    Xc29 ctwo[9] gin[18] pin[18] cone[19:18] CarryBlock
    Xc210 ctwo[10] gin[20] pin[20] cone[21:20] CarryBlock
    Xc211 ctwo[11] gin[22] pin[22] cone[23:22] CarryBlock
    Xc212 ctwo[12] gin[24] pin[24] cone[25:24] CarryBlock
    Xc213 ctwo[13] gin[26] pin[26] cone[27:26] CarryBlock
    Xc214 ctwo[14] gin[28] pin[28] cone[29:28] CarryBlock
    Xc215 ctwo[15] gin[30] pin[30] cone[31:30] CarryBlock

    * level 3
    Xc30 cthree[0] gthree[0] pthree[0] ctwo[1:0] CarryBlock
    Xc31 cthree[1] gthree[2] pthree[2] ctwo[3:2] CarryBlock
    Xc32 cthree[2] gthree[4] pthree[4] ctwo[5:4] CarryBlock
    Xc33 cthree[3] gthree[6] pthree[6] ctwo[7:6] CarryBlock
    Xc34 cthree[4] gthree[8] pthree[8] ctwo[9:8] CarryBlock
    Xc35 cthree[5] gthree[10] pthree[10] ctwo[11:10] CarryBlock
    Xc36 cthree[6] gthree[12] pthree[12] ctwo[13:12] CarryBlock
    Xc37 cthree[7] gthree[14] pthree[14] ctwo[15:14] CarryBlock

    * level 4
    Xc40 cfour[0] gfour[0] pfour[0] cthree[1:0] CarryBlock
    Xc41 cfour[1] gfour[2] pfour[2] cthree[3:2] CarryBlock
    Xc42 cfour[2] gfour[4] pfour[4] cthree[5:4] CarryBlock
    Xc43 cfour[3] gfour[6] pfour[6] cthree[7:6] CarryBlock

    * level 5
    Xc50 cfive[0] gfive[0] pfive[0] cfour[1:0] CarryBlock
    Xc51 cfive[1] gfive[2] pfive[2] cfour[3:2] CarryBlock

    * level 6
    Xc60 c0 gsix[0] psix[0] cfive[1:0] CarryBlock
.ends

.subckt GetGP a b g p 
    * Compute G and P
    XgetG a b ginv nand2
    XgetG2 ginv g inverter

    XgetP a b pinv xnor2
    XgetP2 pinv p inverter
.ends

.subckt LookAheadBlock g[1:0] p[1:0] ghl phl 
    * Does the logic for G_{hl} = G_h + P_h*G_l
    Xghl0 p[1] g[0] yinv nand2
    Xghl1 yinv y inverter
    xghl2 y g[1] ghlinv nor2
    xghl3 ghlinv ghl inverter

    * Does the logic for P_{hl} = P_h*P_l
    Xphl0 p[1] p[0] phlinv nand2
    xphl1 phlinv phl inverter 
.ends

.subckt CarryBlock cin G P cout[1:0]
    *Xt0 cin P y and2
    *Xt1 y G cout[1] or2
    *Xt2 cin cout[0] buffer

    Xt0 cin P x nand2
    Xt1 x y inverter
    Xt2 y G z nor2
    Xt3 z cout[1] inverter
    Xt4 cin cout[0] buffer
.ends

.subckt xor3 a b c s
    Xt0 a b xinv xnor2
    Xt1 xinv x inverter
    Xt2 x c sinv xnor2
    Xt3 sinv s inverter
.ends

.subckt SHLR A[31:0] B[4:0] bool OUT[31:0]
    Xmux bool#32 A[31:0] A[0:31] AX[31:0] mux2

    Xb4a B[4]#16 AX[31:16] AX[15:0] W[31:16] mux2
    Xb4b B[4]#16 AX[15:0] 0#16 W[15:0] mux2

    Xb3a B[3]#24 W[31:8] W[23:0] X[31:8] mux2
    Xb3b B[3]#8 W[7:0] 0#8 X[7:0] mux2

    Xb2a B[2]#28 X[31:4] X[27:0] Y[31:4] mux2
    Xb2b B[2]#4 X[3:0] 0#4 Y[3:0] mux2

    Xb1a B[1]#30 Y[31:2] Y[29:0] Z[31:2] mux2
    Xb1b B[1]#2 Y[1:0] 0#2 Z[1:0] mux2

    Xb0a B[0]#31 Z[31:1] Z[30:0] SL[31:1] mux2
    Xb0b B[0] Z[0] 0 SL[0] mux2

    Xmux2 bool#32 SL[31:0] SL[0:31] OUT[31:0] mux2
.ends

.subckt SRA A[31:0] B[4:0] SL[31:0]
    Xb4a B[4]#16 A[15:0] A[31:16] W[15:0] mux2
    Xb4b B[4]#16 A[31:16] A[31]#16 W[31:16] mux2

    Xb3a B[3]#24 W[23:0] W[31:8] X[23:0] mux2
    Xb3b B[3]#8 W[31:24] A[31]#8 X[31:24] mux2

    Xb2a B[2]#28 X[27:0] X[31:4] Y[27:0] mux2
    Xb2b B[2]#4 X[31:28] A[31]#4 Y[31:28] mux2

    Xb1a B[1]#30 Y[29:0] Y[31:2] Z[29:0] mux2
    Xb1b B[1]#2 Y[31:30] A[31]#2 Z[31:30] mux2

    Xb0a B[0]#31 Z[30:0] Z[31:1] SL[30:0] mux2
    Xb0b B[0] Z[31] A[31] SL[31] mux2
.ends



* END OF HELPER FUNCTIONS

.subckt BOOL alufn[3:0] A[31:0] B[31:0] OUT[31:0]
    Xmux4 A[31:0] B[31:0] alufn[0]#32 alufn[1]#32 alufn[2]#32 alufn[3]#32 OUT[31:0] mux4
.ends

.subckt ARITH alufn[1:0] A[31:0] B[31:0] OUT[31:0] Z V N
    Xid1 B[31:0] alufn[0]#32 XB[31:0] xor2
    Xid2 A[31:0] XB[31:0] alufn[0] SUM[31:0] CarryLookAheadAdder32
    Xid4 alufn[1]#32 SUM[31:0] 0#32 OUT[31:0] mux2
    Xid5 SUM[31] N buffer
    Xid6 SUM[31:0] Z NOR32
    Xid7 A[31] XB[31] SUM[31] V GETV
.ends

.subckt SHIFT alufn[1:0] A[31:0] B[31:0] OUT[31:0]
    Xsra A[31:0] B[4:0] SRA[31:0] SRA
    Xshlr A[31:0] B[4:0] alufn[0] SHLR[31:0] SHLR
    Xmux alufn[0]#32 0#32 SRA[31:0] SR[31:0] mux2
    Xmux2 alufn[1]#32 SHLR[31:0] SR[31:0] OUT[31:0] mux2
.ends

.subckt CMP alufn3 alufn1 Z V N OUT[31:0]
    Xlt N V LT CMPLT
    Xle Z N V LE CMPLE
    Xmux4 alufn1 alufn3 Z LT LE 0 OUT[0] mux4
    .connect OUT[31:1] 0
.ends

.subckt alu alufn[4:0] a[31:0] b[31:0] out[31:0] z v n
    *** Generate outputs from each of BOOL, SHIFT, ARITH, CMP subcircuits:
    xbool alufn[3:0] a[31:0] b[31:0] boolout[31:0] BOOL
    xshift alufn[1:0] a[31:0] b[31:0] shiftout[31:0] SHIFT
    xarith alufn[1:0] a[31:0] b[31:0] arithout[31:0] z v n ARITH
    xcmp alufn[3] alufn[1] z v n cmpout[31:0] CMP

    *** Combine them, using three multiplexors:
    xmux1 alufn[4]#32 nonbool[31:0] boolout[31:0] out[31:0] mux2
    xmux2 alufn[2]#32 arithshift[31:0] cmpout[31:0] nonbool[31:0] mux2
    xmux3 alufn[3]#32 arithout[31:0] shiftout[31:0] arithshift[31:0] mux2
.ends
