.include "nominal.jsim"
.include "stdcell.jsim"
.include "alu.jsim"
*.include "/mit/6.004/jsim/lab6checkoff.jsim"

//Pc

.subckt pc clk reset pcsel[2:0] xadr[31:0] illop[31:0] jt[31:0] ia[31:0] iaplusfour[31:0] aluoutput[31:0]

    // making sure that the newpc31 bit only changes when both oldpc31 and jt31 are 1s
    Xand ia[31] jt[31] newpc31 and2

    // the pc31 will be incremented by 4 in accordance to the program counter convention
    Xincrement ia[31:0] iaplusfour[31:0] PCPlusFour32
    *Xadd1 ia[31:0] 0#29 vdd 0#3 iaplusfour[31:0] CarryLookAheadAdder32
    *Xadd1 ia[31:0] 0#29 vdd 0#3 iaplusfour[31:0] ADDER32
    
    Xmux1 pcsel[0]#32 pcsel[1]#32 iaplusfour[31:0] ia[31] aluoutput[30:0] newpc31 jt[30:2] 0#2 illop[31:0] intermedout[31:0] mux4
    Xmux2 pcsel[2]#32 intermedout[31:0] xadr[31:0] muxout[31:0] mux2
    
    Xreset reset#32 muxout[31:0] vdd 0#31 nextmux[31:0] mux2
    Xdreg nextmux[31:0] clk#32 ia[31:0] dreg
.ends

//Regfile

.subckt regfile clk werf ra2sel ra[4:0] rb[4:0] rc[4:0]
+ wdata[31:0] radata[31:0] rbdata[31:0] wasel 

    Xmux ra2sel#5 rb[4:0] rc[4:0] ra2mux[4:0] mux2
    Xcheck31a ra[4:0] raout checkthirtyone
    Xcheck31b ra2mux[4:0] rbout checkthirtyone

    // WASEL mux
    Xxp vdd#4 0 xp[4:0] connectcirc
    Xwasel wasel#5 rc[4:0] xp[4:0] wa[4:0] mux2

    Xmuxa raout#32 adata[31:0] 0#32 radata[31:0] mux2
    Xmuxb rbout#32 bdata[31:0] 0#32 rbdata[31:0] mux2
    
    Xregfile
    + vdd 0 0 ra[4:0] adata[31:0]     // A read port
    + vdd 0 0 ra2mux[4:0] bdata[31:0] // B read port
    + 0 clk werf wa[4:0] wdata[31:0]  // write port
    + $memory width=32 nlocations=31
.ends

//Ctl

.subckt ctl reset z id[31:26] ra2sel bsel[1:0] alufn[4:0] wdsel[1:0] werf moe wr pcsel[2:0] wasel asel 

    Xctl vdd 0 0 id[31:26]    // one read port
    + xpcsel[2:0] wasel asel ra2sel bsel[1:0] alufn[4:0] wdsel[1:0] werf
    + $memory width=16 nlocations=64 contents=(
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0111000000000001 // 
        + 0b0000000100000101 //  LD
        + 0b0000010100000000 //  ST
        + 0b0111000000000001 // 
        + 0b0100000000000001 //  JMP
        + 0b0000101000000001 //  BEQ
        + 0b0000101000000001 //  BNE
        + 0b0111000000000001 // 
        + 0b0000101000000101 //  LDR
        + 0b0000000000000011 //  ADD
        + 0b0000000000001011 //  SUB
        + 0b0000000000010011 //  MUL 
        + 0b0000000000000011 //  DIV
        + 0b0000000000101011 //  CMPEQ
        + 0b0000000000111011 //  CMPLT
        + 0b0000000001101011 //  CMPLE
        + 0b0111000000000001 // 
        + 0b0000000011000011 //  AND
        + 0b0000000011110011 //  OR
        + 0b0000000010110011 //  XOR
        + 0b0000000011001011 //  XNOR
        + 0b0000000001000011 //  SHL
        + 0b0000000001001011 //  SHR
        + 0b0000000001011011 //  SRA
        + 0b0111000000000001 // 
        + 0b0000000100000011 //  ADDC
        + 0b0000000100001011 //  SUBC
        + 0b0000000100010011 //  MULC
        + 0b0000000100000001 //  DIVC 
        + 0b0000000100101011 //  CMPEQC
        + 0b0000000100111011 //  CMPLTC
        + 0b0000000101101011 //  CMPLEC
        + 0b0111000000000001 // 
        + 0b0000000111000011 //  ANDC
        + 0b0000000111110011 //  ORC
        + 0b0000000110110011 //  XORC
        + 0b0000000111001011 //  XNORC
        + 0b0000000101000011 //  SHLC
        + 0b0000000101001011 //  SHRC
        + 0b0000000101011011 //  SRAC
        + 0b0111000000000001 // 
    + )

    // moe = 1 only on LD and LDR
    // LD and LDR are uniquely identified by wdsel[1] == 1
    Xmoe1 wdsel[1] 0 vdd moe mux2

    // xwr = 1 only on a ST and 0 otherwise
    // ra2sel == 1, bsel == 1 only on a ST (identifies ST uniquely)
    Xxwr1 ra2sel bsel[0] stinstruct and2
    Xxwr2 stinstruct 0 vdd xwr mux2
    
    // logic for BNE/BEQ switching
    Xnor id31 id27 nor nor2
    Xand id30 id29 id28 nor bnebeq and4
    Xswitch id26 z whichout xor2
    Xbranch whichout bnebeq branch and2
    Xpcsel branch#3 xpcsel[2:0] 0#2 vdd pcsel[2:0] mux2
    
    // for reset of wr
    Xreset reset xwr 0 wr mux2
.ends


// beta

.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0] moe mrd[31:0] wr mwd[31:0]

    // create xadr and illop
    Xxadrbuffer vdd 0#27 vdd 0#3 xadr[31:0] buffer // 0x80000008
    Xillopbuffer vdd 0#28 vdd 0#2 illop[31:0] buffer // 0x80000004

    // component pieces of the beta: pc, regfile, ctl
    // pc
    Xpc clk reset pcsel[2:0] xadr[31:0] illop[31:0] radata[31:0] ia[31:0] iaplusfour[31:0] aluoutput[31:0] pc
    // regfile 
    Xregfile clk werf ra2sel id[20:16] id[15:11] id[25:21] wdata[31:0] radata[31:0] mwd[31:0] wasel regfile
    // ctl
    Xctl reset z id[31:26] ra2sel bsel[1:0] alufn[4:0] wdseltemp[1:0] werftemp moe wrtemp xpcsel[2:0] waseltemp asel ctl
    
    // inverter logic
    Xum ia[31] usermode inverter
    Xinvlogic1 irq usermode shouldinterrupt and2
    Xinvlogic2 shouldinterrupt waseltemp vdd wasel mux2
    Xinvlogic3 shouldinterrupt werftemp vdd werf mux2
    Xinvlogic4 shouldinterrupt#2 wdseltemp[1:0] 0#2 wdsel[1:0] mux2
    Xinvlogic5 shouldinterrupt wrtemp 0 wr mux2
    
    // muxes for the beta
    // aselmux: selects what goes into a of alu
    Xaselmux asel#32 radata[31:0] 0 iaplusfour[30:0] adata[31:0] mux2 
    // bsel mux: selects what goes into b of alu
    Xbselmux bsel[0]#32 mwd[31:0] cext[31:0] bintermed[31:0] mux2
    Xbselmux2 bsel[1]#32 bintermed[31:0] fourtimescext[31:0] bdata[31:0] mux2
    // wdsel mux: 
    Xwdselmux wdsel[1]#32 wdsel[0]#32 ia[31] iaplusfour[30:0] mrd[31:0] ma[31:0] ma[31:0] wdata[31:0] mux4
    // pcsel mux: selects how to increment the program counter
    Xpcselmux shouldinterrupt#3 xpcsel[2:0] vdd 0 0 pcsel[2:0] mux2

    // Get z
    Xnors radata[31:0] z nor32
    
    // connect id and cext
    Xconnectcirc1 id[15]#16 cext[31:16] connectcirc
    Xconnectcirc2 id[15:0] cext[15:0] connectcirc
    Xfourtimes cext[31:0] 0#3 vdd 0#2 fourtimescext[31:0] SHLR

    Xalu alufn[4:0] adata[31:0] bdata[31:0] ma[31:0] z1 v1 n1 alu
    Xaluoutputbuffer ma[31:0] aluoutput[31:0] buffer

.ends

.subckt nor32 radata[31:0] z 
    Xnor01 radata[3:0] nors01 nor4
    Xnor02 radata[7:4] nors02 nor4
    Xnor03 radata[11:8] nors03 nor4
    Xnor04 radata[15:12] nors04 nor4
    Xnor05 radata[19:16] nors05 nor4
    Xnor06 radata[23:20] nors06 nor4
    Xnor07 radata[27:24] nors07 nor4
    Xnor08 radata[31:28] nors08 nor4
    
    Xnor10 nors01 nors02 nors03 nors04 nor10 and4
    Xnor11 nors05 nors06 nors07 nors08 nor11 and4
    Xnor20 nor10 nor11 z and2
.ends


// helper subcircuits

.subckt connectcirc a b
    xbuff a b buffer
.ends

.subckt checkthirtyone A[4:0] out
    Xand1 A[4:1] outinv1 nand4
    Xinv1 outinv1 out1 inverter
    Xand2 A[0] out1 outinv nand2
    Xinv2 outinv out inverter
.ends


