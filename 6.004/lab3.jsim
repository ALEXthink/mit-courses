.include "/mit/6.004/jsim/nominal.jsim"
.include "/mit/6.004/jsim/stdcell.jsim"
.include "/mit/6.004/jsim/lab3_test_shift.jsim"

.subckt BOOL alufn[3:0] A[31:0] B[31:0] OUT[31:0]
xbooleanb A[31:0] B[31:0] alufn[0]#32 alufn[1]#32 alufn[2]#32 alufn[3]#32 OUT[31:0] mux4
.ends

.subckt booleanbase a3 a2 a1 a0 A B out 
Xand1 A B d0 and2
Xxor1 A B d1 xor2
Xbuffer1 A d2 buffer
Xor1 A B d3 or2
Xand21 a2 a1 s0 and2
Xand31 a3 a1 s1 and2
Xmux1 s0 s1 d0 d1 d2 d3 out mux4
.ends

.subckt ARITH alufn[1:0] A[31:0] B[31:0] OUT[31:0] Z V N
xbxorgate alufn[0]#32 B[31:0] XB[31:0] xor2
xfulladder alufn[0] A[0] XB[0] OUT[0] C[0] FA
xfulladder2 C[0:30] A[1:31] XB[1:31] OUT[1:31] C[1:31] FA
xbuffer OUT[31] N buffer

Xnor01 OUT[3:0] nors01 nor4
Xnor02 OUT[7:4] nors02 nor4
Xnor03 OUT[11:8] nors03 nor4
Xnor04 OUT[15:12] nors04 nor4
Xnor05 OUT[19:16] nors05 nor4
Xnor06 OUT[23:20] nors06 nor4
Xnor07 OUT[27:24] nors07 nor4
Xnor08 OUT[31:28] nors08 nor4

Xnor10 nors01 nors02 nors03 nors04 nor10 and4
Xnor11 nors05 nors06 nors07 nors08 nor11 and4
Xnor20 nor10 nor11 Z and2

xvcheck0 A[31] XB[31] OUT[31] check00 checkvfirst
xvcheck1 A[31] XB[31] OUT[31] check01 checkvsecond
xgetv check00 check01 V or2
.ends

.subckt checkvsecond XA XB S Z
xinv1 XA z1 inverter
xinv2 XB z2 inverter
xand1 z1 z2 S Z and3
.ends

.subckt checkvfirst XA XB S Z
xand1 XA XB z1 and2
xinv1 S z2 inverter
xand2 z2 z1 Z and2
.ends


* Full adder module that takes in two bits A and B, along with some carry Cin, and returns S and a carry C0
.subckt FA Cin A B S C0
Xxor1 A B 1 xor2
Xxor2 Cin 1 S xor2
Xnand1 A B 2 nand2
Xnand2 B Cin 3 nand2
Xnand3 A Cin 4 nand2
Xnand4 2 3 4 C0 nand3
.ends

.subckt SHIFT alufn[1:0] A[31:0] B[31:0] OUT[31:0]
xdummy OUT[31:0] constant0
xshiftleft A[31:0] B[4:0] shl[31:0] SHL
xshiftright A[31:0] B[4:0] shr[31:0] SHR
xshirtrightext A[31:0] B[4:0] sra[31:0] SRA
xcomparemux alufn[1]#32 alufn[0]#32 shl[31:0] shr[31:0] sra[31:0] 0#32 OUT[31:0] mux4
.ends

.subckt SHL A[31:0] B[4:0] OUT[31:0]
xshift4 B[4]#32 A[31:0] A[15:0] 0#16 out4[31:0] mux2
xshift3 B[3]#32 out4[31:0] A[23:0] 0#8 out3[31:0] mux2
xshift2 B[2]#32 out3[31:0] A[27:0] 0#4 out2[31:0] mux2
xshift1 B[1]#32 out2[31:0] A[29:0] 0#2 out1[31:0] mux2
xshift0 B[0]#32 out1[31:0] A[30:0] 0 OUT[31:0] mux2
.ends

.subckt SHR A[31:0] B[4:0] OUT[31:0]
xreversein A[31:0] AREV[31:0] REVERSEBITS
xshiftleft AREV[31:0] B[4:0] interout[31:0] SHL
xreverseout interout[31:0] OUT[31:0] REVERSEBITS
.ends

.subckt SRA A[31:0] B[4:0] OUT[31:0]
xshift4 B[4]#32 A[31:0] A[31]#16 A[31:16] out4[31:0] mux2
xshift3 B[3]#32 out4[31:0] A[31]#8 A[31:8] out3[31:0] mux2
xshift2 B[2]#32 out3[31:0] A[31]#4 A[31:4] out2[31:0] mux2
xshift1 B[1]#32 out2[31:0] A[31]#2 A[31:2] out1[31:0] mux2
xshift0 B[0]#32 out1[31:0] A[31] A[31:1] OUT[31:0] mux2
.ends

.subckt REVERSEBITS A[31:0] OUT[31:0] 
xbuff A[31:0] OUT[0:31] buffer
.ends

.subckt CMP alufn3 alufn1 Z V N OUT[31:0]
xzero OUT[31:1] constant0
xxorout N V outxor xor2
xorout Z outxor outor or2
xcomparemux alufn1 alufn3 Z outxor outor 0 OUT[0] mux4
.ends

.subckt alu alufn[4:0] a[31:0] b[31:0] out[31:0] z v n

*** Generate outputs from each of BOOL, SHIFT, ARITH, CMP subcircuits:
xbool alufn[3:0] a[31:0] b[31:0] boolout[31:0] BOOL
xshift alufn[1:0] a[31:0] b[31:0] shiftout[31:0] SHIFT
xarith alufn[1:0] a[31:0] b[31:0] arithout[31:0] z v n ARITH
xcmp alufn[3] alufn[1] z v n cmpout[31:0] CMP

*** Combine them, using three multiplexors:
xmux1 alufn[4]#32 nonbool[31:0] boolout[31:0] out[31:0] mux2
xmux2 alufn[2]#32 arithshift[31:0] cmpout[31:0] nonbool[31:0] mux2
xmux3 alufn[3]#32 arithout[31:0] shiftout[31:0] arithshift[31:0] mux2

.ends
